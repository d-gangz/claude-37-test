---
description: Follow these rules when working on the frontend
globs: app/**/*.tsx, app/**/*.ts, components/**/*.tsx, components/**/*.ts, _components/**/*.tsx, _components/**/*.ts, lib/hooks/**/*.ts, lib/hooks/**/*.tsx, tailwind.config.ts, next.config.js, *.css
alwaysApply: false
---
---
description: Follow these rules when working on the frontend.
globs: app/**/*.tsx, app/**/*.ts, components/**/*.tsx, components/**/*.ts, _components/**/*.tsx, _components/**/*.ts, lib/hooks/**/*.ts, lib/hooks/**/*.tsx, tailwind.config.ts, next.config.js, *.css
---
### Frontend Rules

It uses Next.js, Tailwind, Shadcn, and Framer Motion.

#### General Rules

- Use `lucide-react` for icons
- Use Shadcn UI components with proper composition and customization
- Always use `type` instead of `interface` to define the types
- Follow Tailwind CSS class naming conventions and utility patterns
- Implement mobile-first responsive design with Tailwind breakpoints
- Maintain consistent spacing and layout using Tailwind's spacing scale
- Ensure components are accessible following WCAG guidelines
- Keep component styles modular and reusable
- Optimize component bundle size through proper code splitting

#### Color rules

- There are 12 steps in each scale. Each step was designed for at least one specific use case
- Reference the steps and colors from [globals.css](mdc:app/globals.css) and [tailwind.config.ts](mdc:tailwind.config.ts)

##### Steps 1–2: Backgrounds
Steps 1 and 2 are designed for app backgrounds and subtle component backgrounds. You can use them interchangeably, depending on the vibe you're going for.

Appropriate applications include:
- Main app background
- Striped table background
- Code block background
- Card background
- Sidebar background
- Canvas area background

##### Steps 3–5: Component backgrounds
Steps 3, 4, and 5 are designed for UI component backgrounds.

- Step 3 is for normal states.
- Step 4 is for hover states.
- Step 5 is for pressed or selected states.

If your component has a transparent background in its default state, you can use Step 3 for its hover state.

Steps 11 and 12—which are designed for text—are guaranteed to Lc 60 and Lc 90 APCA contrast ratio on top of a step 2 background from the same scale.

##### Steps 6–8: Borders
Steps 6, 7, and 8 are designed for borders.

- Step 6 is designed for subtle borders on components which are not interactive. For example sidebars, headers, cards, alerts, and separators.
- Step 7 is designed for subtle borders on interactive components.
- Step 8 is designed for stronger borders on interactive components and focus rings.

##### Steps 9–10: Solid backgrounds
Steps 9 and 10 are designed for solid backgrounds.

Step 9 has the highest chroma of all steps in the scale. In other words, it's the purest step, the step mixed with the least amount of white or black. Because 9 is the purest step, it has a wide range of applications:

- Website/App backgrounds
- Website section backgrounds
- Header backgrounds
- Component backgrounds
- Graphics/Logos
- Overlays
- Coloured shadows
- Accent borders
- Step 10 is designed for component hover states, where step 9 is the component's normal state background.

Most step 9 colors are designed for white foreground text. Sky, Mint, Lime, Yellow, and Amber are designed for dark foreground text and steps 9 and 10.

##### Steps 11–12: Text
Steps 11 and 12 are designed for text.

- Step 11 is designed for low-contrast text.
- Step 12 is designed for high-contrast text.

#### Components

- Use divs instead of other html tags unless otherwise specified
- Separate the main parts of a component's html with an extra blank line for visual spacing
- Always tag a component with either `use server` or `use client` at the top, including layouts and pages

##### Organization

- All components be named using kebab case like `example-component.tsx` unless otherwise specified
- Put components in `/_components` in the route if one-off components
- Put components in `/components` from the root if shared components

##### Data Fetching

- Fetch data in server components and pass the data down as props to client components.
- Use server actions from `/actions` to mutate data.

##### Server Components

- Use `"use server"` at the top of the file.
- Implement Suspense for asynchronous data fetching to show loading states while data is being fetched.
- If no asynchronous logic is required for a given server component, you do not need to wrap the component in `<Suspense>`. You can simply return the final UI directly since there is no async boundary needed.
- If asynchronous fetching is required, you can use a `<Suspense>` boundary and a fallback to indicate a loading state while data is loading.
- Server components cannot be imported into client components. If you want to use a server component in a client component, you must pass the as props using the "children" prop

Example of a server layout:

```tsx
"use server";

export default async function ExampleServerLayout({ children }: { children: React.ReactNode }) {
  return children;
}
```

Example of a server page (with async logic):

```tsx
"use server";

import { Suspense } from "react";
import { SomeAction } from "@/actions/some-actions";
import SomeComponent from "./_components/some-component";
import SomeSkeleton from "./_components/some-skeleton";

export default async function ExampleServerPage() {
  return (
    <Suspense fallback={<SomeSkeleton className="some-class" />}>
      <SomeComponentFetcher />
    </Suspense>
  );
}

async function SomeComponentFetcher() {
  const { data } = await SomeAction();
  return (
    <SomeComponent
      className="some-class"
      initialData={data || []}
    />
  );
}
```

Example of a server page (no async logic required):

```tsx
"use server";

import SomeClientComponent from "./_components/some-client-component";

// In this case, no asynchronous work is being done, so no Suspense or fallback is required.
export default async function ExampleServerPage() {
  return <SomeClientComponent initialData={[]} />;
}
```

Example of a server component:

```tsx
"use server";

type ExampleServerComponentProps = {
  // Your props here
}

export async function ExampleServerComponent({ props }: ExampleServerComponentProps) {
  // Your code here
}
```

##### Client Components

- Use `"use client"` at the top of the file
- Client components can safely rely on props passed down from server components, or handle UI interactions without needing <Suspense> if there’s no async logic.

Example of a client page:

```tsx
"use client";

export default function ExampleClientPage() {
  // Your code here
}
```

Example of a client component:

```tsx
"use client";

type ExampleClientComponentProps = {
  initialData: any[];
}

export default function ExampleClientComponent({ initialData }: ExampleClientComponentProps) {
  // Client-side logic here
  return <div>{initialData.length} items</div>;
}
```